
Uotpup-Led-AVRMega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000533  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c5  00000000  00000000  00000683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ee  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d5  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	15 d0       	rcall	.+42     	; 0x5e <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <Init_port_D>:
#define  F_CPU 8000000
#include <avr/io.h>

void Init_port_D()
{
	DDRD=0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD=0b10000000;
  3c:	80 e8       	ldi	r24, 0x80	; 128
  3e:	82 bb       	out	0x12, r24	; 18
	PORTD=0b01000000;
  40:	80 e4       	ldi	r24, 0x40	; 64
  42:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00100000;
  44:	80 e2       	ldi	r24, 0x20	; 32
  46:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00010000;
  48:	80 e1       	ldi	r24, 0x10	; 16
  4a:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00001000;
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00000100;
  50:	84 e0       	ldi	r24, 0x04	; 4
  52:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00000010;
  54:	82 e0       	ldi	r24, 0x02	; 2
  56:	82 bb       	out	0x12, r24	; 18
	PORTD=0b00000001;
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	82 bb       	out	0x12, r24	; 18
  5c:	08 95       	ret

0000005e <main>:
}

int main(void)
{
	Init_port_D();
  5e:	ec df       	rcall	.-40     	; 0x38 <Init_port_D>
  60:	ff cf       	rjmp	.-2      	; 0x60 <main+0x2>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
